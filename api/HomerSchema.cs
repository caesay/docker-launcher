// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var homerSchema = HomerSchema.FromJson(jsonString);

namespace docker_launcher;

using System;
using System.Collections.Generic;

using System.Globalization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

/// <summary>
/// https://github.com/bastienwirtz/homer/blob/main/docs/configuration.md
/// </summary>
public partial class HomerSchema
{
    [JsonProperty("colors", NullValueHandling = NullValueHandling.Ignore)]
    public Colors Colors { get; set; }

    /// <summary>
    /// 'auto' or number (must be a factor of 12: 1, 2, 3, 4, 6, 12)
    /// </summary>
    [JsonProperty("columns", NullValueHandling = NullValueHandling.Ignore)]
    [JsonConverter(typeof(ParseStringConverter))]
    public long? Columns { get; set; }

    /// <summary>
    /// # whether you want to display a message when the apps are not accessible anymore (VPN
    /// disconnected for example). You should set it to true when using an authentication proxy,
    /// it also reloads the page when a redirection is detected when checking connectivity.
    /// </summary>
    [JsonProperty("connectivityCheck", NullValueHandling = NullValueHandling.Ignore)]
    public bool? ConnectivityCheck { get; set; }

    [JsonProperty("defaults", NullValueHandling = NullValueHandling.Ignore)]
    public Defaults Defaults { get; set; }

    /// <summary>
    /// Title of the document. When not filled, title (and subtitle will be used)
    /// </summary>
    [JsonProperty("documentTitle", NullValueHandling = NullValueHandling.Ignore)]
    public string DocumentTitle { get; set; }

    /// <summary>
    /// Use external configuration file. Using this will ignore remaining config in this file
    /// externalConfig: https://example.com/server-luci/config.yaml
    /// </summary>
    [JsonProperty("externalConfig", NullValueHandling = NullValueHandling.Ignore)]
    public string ExternalConfig { get; set; }

    /// <summary>
    /// footer Line content. HTML is supported. Set false if you want to hide it.
    /// </summary>
    [JsonProperty("footer", NullValueHandling = NullValueHandling.Ignore)]
    public Footer? Footer { get; set; }

    /// <summary>
    /// Show header, default is true
    /// </summary>
    [JsonProperty("header", NullValueHandling = NullValueHandling.Ignore)]
    public bool? Header { get; set; }

    /// <summary>
    /// Define hotkeys, for example for search
    /// </summary>
    [JsonProperty("hotkey", NullValueHandling = NullValueHandling.Ignore)]
    public Hotkey Hotkey { get; set; }

    /// <summary>
    /// Dashboard icon
    /// </summary>
    [JsonProperty("icon", NullValueHandling = NullValueHandling.Ignore)]
    public string Icon { get; set; }

    /// <summary>
    /// Links in the navigation bar
    /// </summary>
    [JsonProperty("links", NullValueHandling = NullValueHandling.Ignore)]
    public Link[] Links { get; set; }

    /// <summary>
    /// Path to logo image
    /// </summary>
    [JsonProperty("logo", NullValueHandling = NullValueHandling.Ignore)]
    public string Logo { get; set; }

    /// <summary>
    /// Messagebox
    /// </summary>
    [JsonProperty("message", NullValueHandling = NullValueHandling.Ignore)]
    public Messagebox Message { get; set; }

    /// <summary>
    /// Optional: Proxy / hosting option
    /// </summary>
    [JsonProperty("proxy", NullValueHandling = NullValueHandling.Ignore)]
    public Proxy Proxy { get; set; }

    /// <summary>
    /// Services
    /// </summary>
    [JsonProperty("services", NullValueHandling = NullValueHandling.Ignore)]
    public Service[] Services { get; set; }

    /// <summary>
    /// Will load custom CSS files. Especially useful for custom icon sets. Entries are paths to
    /// the stylesheets
    /// </summary>
    [JsonProperty("stylesheet", NullValueHandling = NullValueHandling.Ignore)]
    public string[] Stylesheet { get; set; }

    /// <summary>
    /// Subtitle of the dashboard
    /// </summary>
    [JsonProperty("subtitle", NullValueHandling = NullValueHandling.Ignore)]
    public string Subtitle { get; set; }

    /// <summary>
    /// 'default' or one of the themes available in 'src/assets/themes'
    /// </summary>
    [JsonProperty("theme", NullValueHandling = NullValueHandling.Ignore)]
    public string Theme { get; set; }

    /// <summary>
    /// Title of the dashboard
    /// </summary>
    [JsonProperty("title", NullValueHandling = NullValueHandling.Ignore)]
    public string Title { get; set; }
}

public partial class Colors
{
    [JsonProperty("dark", NullValueHandling = NullValueHandling.Ignore)]
    public ColorSet Dark { get; set; }

    [JsonProperty("light", NullValueHandling = NullValueHandling.Ignore)]
    public ColorSet Light { get; set; }
}

public partial class ColorSet
{
    [JsonProperty("background", NullValueHandling = NullValueHandling.Ignore)]
    public string Background { get; set; }

    [JsonProperty("background-image", NullValueHandling = NullValueHandling.Ignore)]
    public string BackgroundImage { get; set; }

    [JsonProperty("card-background", NullValueHandling = NullValueHandling.Ignore)]
    public string CardBackground { get; set; }

    [JsonProperty("card-shadow", NullValueHandling = NullValueHandling.Ignore)]
    public string CardShadow { get; set; }

    [JsonProperty("highlight-hover", NullValueHandling = NullValueHandling.Ignore)]
    public string HighlightHover { get; set; }

    [JsonProperty("highlight-primary", NullValueHandling = NullValueHandling.Ignore)]
    public string HighlightPrimary { get; set; }

    [JsonProperty("highlight-secondary", NullValueHandling = NullValueHandling.Ignore)]
    public string HighlightSecondary { get; set; }

    [JsonProperty("link", NullValueHandling = NullValueHandling.Ignore)]
    public string Link { get; set; }

    [JsonProperty("link-hover", NullValueHandling = NullValueHandling.Ignore)]
    public string LinkHover { get; set; }

    [JsonProperty("text", NullValueHandling = NullValueHandling.Ignore)]
    public string Text { get; set; }

    [JsonProperty("text-header", NullValueHandling = NullValueHandling.Ignore)]
    public string TextHeader { get; set; }

    [JsonProperty("text-subtitle", NullValueHandling = NullValueHandling.Ignore)]
    public string TextSubtitle { get; set; }

    [JsonProperty("text-title", NullValueHandling = NullValueHandling.Ignore)]
    public string TextTitle { get; set; }
}

public partial class Defaults
{
    /// <summary>
    /// One of 'auto', 'light', or 'dark'
    /// </summary>
    [JsonProperty("colorTheme", NullValueHandling = NullValueHandling.Ignore)]
    public ColorTheme? ColorTheme { get; set; }

    /// <summary>
    /// Layout of the dashboard, either 'columns' or 'list'
    /// </summary>
    [JsonProperty("layout", NullValueHandling = NullValueHandling.Ignore)]
    public Layout? Layout { get; set; }
}

/// <summary>
/// Define hotkeys, for example for search
/// </summary>
public partial class Hotkey
{
    /// <summary>
    /// hotkey for search, e.g. Shift
    /// </summary>
    [JsonProperty("search")]
    public string Search { get; set; }
}

public partial class Link
{
    /// <summary>
    /// Fontawesome icon
    /// </summary>
    [JsonProperty("icon", NullValueHandling = NullValueHandling.Ignore)]
    public string Icon { get; set; }

    /// <summary>
    /// Name as seen in the navbar
    /// </summary>
    [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
    public string Name { get; set; }

    /// <summary>
    /// html tag target attribute like _blank for a new page
    /// </summary>
    [JsonProperty("target", NullValueHandling = NullValueHandling.Ignore)]
    public string Target { get; set; }

    /// <summary>
    /// Url of the link. When #filename is used, it is a link to another homer page, while
    /// 'filename' is the name of the config file
    /// </summary>
    [JsonProperty("url")]
    public string Url { get; set; }
}

/// <summary>
/// Messagebox
/// </summary>
public partial class Messagebox
{
    /// <summary>
    /// HTML content for the message box
    /// </summary>
    [JsonProperty("content", NullValueHandling = NullValueHandling.Ignore)]
    public string Content { get; set; }

    /// <summary>
    /// Fontawesome icon for the message box
    /// </summary>
    [JsonProperty("icon", NullValueHandling = NullValueHandling.Ignore)]
    public string Icon { get; set; }

    /// <summary>
    /// Mapping for the content loaded from the URL
    /// </summary>
    [JsonProperty("mapping", NullValueHandling = NullValueHandling.Ignore)]
    public Dictionary<string, object> Mapping { get; set; }

    /// <summary>
    /// The refresh interval in milliseconds for reloading the message url
    /// </summary>
    [JsonProperty("refreshInterval", NullValueHandling = NullValueHandling.Ignore)]
    public long? RefreshInterval { get; set; }

    /// <summary>
    /// See https://bulma.io/documentation/components/message/#colors for styling options
    /// </summary>
    [JsonProperty("style", NullValueHandling = NullValueHandling.Ignore)]
    public string Style { get; set; }

    /// <summary>
    /// Title of the message box
    /// </summary>
    [JsonProperty("title", NullValueHandling = NullValueHandling.Ignore)]
    public string Title { get; set; }

    [JsonProperty("url", NullValueHandling = NullValueHandling.Ignore)]
    public Uri Url { get; set; }
}

/// <summary>
/// Optional: Proxy / hosting option
/// </summary>
public partial class Proxy
{
    /// <summary>
    /// send custom headers when fetching service specific data. Can also be set on a service
    /// level.
    /// </summary>
    [JsonProperty("headers", NullValueHandling = NullValueHandling.Ignore)]
    public Dictionary<string, object> Headers { get; set; }

    /// <summary>
    /// # send cookies & authorization headers when fetching service specific data. Set to `true`
    /// if you use an authentication proxy. Can be overrided on service level.
    /// </summary>
    [JsonProperty("useCredentials", NullValueHandling = NullValueHandling.Ignore)]
    public bool? UseCredentials { get; set; }
}

public partial class Service
{
    /// <summary>
    /// Optional css class to add on the service group. Example 'highlight-purple'
    /// </summary>
    [JsonProperty("class", NullValueHandling = NullValueHandling.Ignore)]
    public string Class { get; set; }

    /// <summary>
    /// Fontawesome icon for the service
    /// </summary>
    [JsonProperty("icon", NullValueHandling = NullValueHandling.Ignore)]
    public string Icon { get; set; }

    [JsonProperty("items")]
    public Item[] Items { get; set; }

    /// <summary>
    /// A path to an image can also be provided. Note that icon take precedence if both icon and
    /// logo are set.
    /// </summary>
    [JsonProperty("logo", NullValueHandling = NullValueHandling.Ignore)]
    public string Logo { get; set; }

    /// <summary>
    /// Service name
    /// </summary>
    [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
    public string Name { get; set; }
}

public partial class Item
{
    /// <summary>
    /// Fontawesome icon for the item, alternative for logo
    /// </summary>
    [JsonProperty("icon", NullValueHandling = NullValueHandling.Ignore)]
    public string Icon { get; set; }

    /// <summary>
    /// Optional keyword used for searching purpose
    /// </summary>
    [JsonProperty("keywords", NullValueHandling = NullValueHandling.Ignore)]
    public string Keywords { get; set; }

    /// <summary>
    /// Path to a logo. Alternatively a fa icon can be provided
    /// </summary>
    [JsonProperty("logo", NullValueHandling = NullValueHandling.Ignore)]
    public string Logo { get; set; }

    [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
    public string Name { get; set; }

    [JsonProperty("subtitle", NullValueHandling = NullValueHandling.Ignore)]
    public string Subtitle { get; set; }

    /// <summary>
    /// Show tag
    /// </summary>
    [JsonProperty("tag", NullValueHandling = NullValueHandling.Ignore)]
    public string Tag { get; set; }

    /// <summary>
    /// Styleclass for the tag
    /// </summary>
    [JsonProperty("tagstyle", NullValueHandling = NullValueHandling.Ignore)]
    public string Tagstyle { get; set; }

    /// <summary>
    /// html tag target attribute like _blank for a new page
    /// </summary>
    [JsonProperty("target", NullValueHandling = NullValueHandling.Ignore)]
    public string Target { get; set; }

    /// <summary>
    /// Optional, loads a specific component that provides extra features. MUST MATCH a file name
    /// (without file extension) available in `src/components/services`
    /// </summary>
    [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
    public string Type { get; set; }

    /// <summary>
    /// Url of this item
    /// </summary>
    [JsonProperty("url", NullValueHandling = NullValueHandling.Ignore)]
    public string Url { get; set; }
}

/// <summary>
/// One of 'auto', 'light', or 'dark'
/// </summary>
public enum ColorTheme { Auto, Dark, Light };

/// <summary>
/// Layout of the dashboard, either 'columns' or 'list'
/// </summary>
public enum Layout { Columns, List };

/// <summary>
/// footer Line content. HTML is supported. Set false if you want to hide it.
/// </summary>
public partial struct Footer
{
    public bool? Bool;
    public string String;

    public static implicit operator Footer(bool Bool) => new Footer { Bool = Bool };
    public static implicit operator Footer(string String) => new Footer { String = String };
}

public partial class HomerSchema
{
    public static HomerSchema FromJson(string json) => JsonConvert.DeserializeObject<HomerSchema>(json, Converter.Settings);
}

public static class Serialize
{
    public static string ToJson(this HomerSchema self) => JsonConvert.SerializeObject(self, Converter.Settings);
}

internal static class Converter
{
    public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
    {
        MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
        DateParseHandling = DateParseHandling.None,
        Converters =
        {
            ColorThemeConverter.Singleton,
            LayoutConverter.Singleton,
            FooterConverter.Singleton,
            new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
        },
    };
}

internal class ParseStringConverter : JsonConverter
{
    public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

    public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
    {
        if (reader.TokenType == JsonToken.Null) return null;
        var value = serializer.Deserialize<string>(reader);
        long l;
        if (Int64.TryParse(value, out l))
        {
            return l;
        }
        throw new Exception("Cannot unmarshal type long");
    }

    public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
    {
        if (untypedValue == null)
        {
            serializer.Serialize(writer, null);
            return;
        }
        var value = (long)untypedValue;
        serializer.Serialize(writer, value.ToString());
        return;
    }

    public static readonly ParseStringConverter Singleton = new ParseStringConverter();
}

internal class ColorThemeConverter : JsonConverter
{
    public override bool CanConvert(Type t) => t == typeof(ColorTheme) || t == typeof(ColorTheme?);

    public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
    {
        if (reader.TokenType == JsonToken.Null) return null;
        var value = serializer.Deserialize<string>(reader);
        switch (value)
        {
        case "auto":
            return ColorTheme.Auto;
        case "dark":
            return ColorTheme.Dark;
        case "light":
            return ColorTheme.Light;
        }
        throw new Exception("Cannot unmarshal type ColorTheme");
    }

    public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
    {
        if (untypedValue == null)
        {
            serializer.Serialize(writer, null);
            return;
        }
        var value = (ColorTheme)untypedValue;
        switch (value)
        {
        case ColorTheme.Auto:
            serializer.Serialize(writer, "auto");
            return;
        case ColorTheme.Dark:
            serializer.Serialize(writer, "dark");
            return;
        case ColorTheme.Light:
            serializer.Serialize(writer, "light");
            return;
        }
        throw new Exception("Cannot marshal type ColorTheme");
    }

    public static readonly ColorThemeConverter Singleton = new ColorThemeConverter();
}

internal class LayoutConverter : JsonConverter
{
    public override bool CanConvert(Type t) => t == typeof(Layout) || t == typeof(Layout?);

    public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
    {
        if (reader.TokenType == JsonToken.Null) return null;
        var value = serializer.Deserialize<string>(reader);
        switch (value)
        {
        case "columns":
            return Layout.Columns;
        case "list":
            return Layout.List;
        }
        throw new Exception("Cannot unmarshal type Layout");
    }

    public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
    {
        if (untypedValue == null)
        {
            serializer.Serialize(writer, null);
            return;
        }
        var value = (Layout)untypedValue;
        switch (value)
        {
        case Layout.Columns:
            serializer.Serialize(writer, "columns");
            return;
        case Layout.List:
            serializer.Serialize(writer, "list");
            return;
        }
        throw new Exception("Cannot marshal type Layout");
    }

    public static readonly LayoutConverter Singleton = new LayoutConverter();
}

internal class FooterConverter : JsonConverter
{
    public override bool CanConvert(Type t) => t == typeof(Footer) || t == typeof(Footer?);

    public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
    {
        switch (reader.TokenType)
        {
        case JsonToken.Boolean:
            var boolValue = serializer.Deserialize<bool>(reader);
            return new Footer { Bool = boolValue };
        case JsonToken.String:
        case JsonToken.Date:
            var stringValue = serializer.Deserialize<string>(reader);
            return new Footer { String = stringValue };
        }
        throw new Exception("Cannot unmarshal type Footer");
    }

    public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
    {
        var value = (Footer)untypedValue;
        if (value.Bool != null)
        {
            serializer.Serialize(writer, value.Bool.Value);
            return;
        }
        if (value.String != null)
        {
            serializer.Serialize(writer, value.String);
            return;
        }
        throw new Exception("Cannot marshal type Footer");
    }

    public static readonly FooterConverter Singleton = new FooterConverter();
}